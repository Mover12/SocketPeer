(()=>{"use strict";class e extends EventTarget{constructor(e){super();for(const t of e)this.init(t)}init(e){Object.defineProperty(this,`on${e}`,{set(t){this.on(e,t)}})}on(e,t){this.addEventListener(e,t)}emit(e,t){this.dispatchEvent(new CustomEvent(e,{detail:t}))}}const t=e;class n extends WebSocket{constructor(e){super(e.url),this.id=e.id,this.addEventListener("open",(()=>{this.send(JSON.stringify({url:"socket",body:{event:"connect",id:this.id}}))}))}}const s=n,i=Array.from(Array(8),(()=>Math.floor(16*Math.random()).toString(16))).join(""),o=document.querySelector(".text-user-id"),a=document.querySelector(".input-user-id"),r=document.querySelector(".open");o.innerHTML=i;const c=new class extends s{constructor(e){super(e),this.peer=e.peer,this.addEventListener("message",(async e=>{const t=JSON.parse(e.data);if("signaling"==t.url&&"sdp"==t.body.event)if("offer"==t.body.sdp.type){const e=await this.peer.createAnswer(t.body.uid,t.body.sdp);this.send(JSON.stringify({url:"signaling",body:{event:"sdp",uid:t.body.uid,sdp:e}}))}else"answer"==t.body.sdp.type&&await this.peer.setAnswer(t.body.uid,t.body.sdp)}))}async open(e){const t=await this.peer.createOffer(e);this.send(JSON.stringify({url:"signaling",body:{event:"sdp",uid:e,sdp:t}}))}}({id:i,url:"ws://127.0.0.1:8000",peer:new class extends t{constructor(e){super(["open","message","close"]),this.id=e.id,this.peerConnections={},this.dataChannels={}}async createOffer(e){this.peerConnections[e]=new RTCPeerConnection,this.dataChannels[e]=await this.peerConnections[e].createDataChannel(e),this.setupPeerConnection(e),this.setupDataChannel(e);const t=await this.peerConnections[e].createOffer();return await this.peerConnections[e].setLocalDescription(t),await new Promise(((t,n)=>{this.peerConnections[e].onicecandidate=n=>{t(this.peerConnections[e].localDescription)}}))}async createAnswer(e,t){this.peerConnections[e]=new RTCPeerConnection,this.peerConnections[e].addEventListener("datachannel",(t=>{this.dataChannels[e]=t.channel,this.setupDataChannel(e)})),this.setupPeerConnection(e),await this.peerConnections[e].setRemoteDescription(t);const n=await this.peerConnections[e].createAnswer();return await this.peerConnections[e].setLocalDescription(n),n}async setAnswer(e,t){await this.peerConnections[e].setRemoteDescription(t)}setupPeerConnection(e){this.peerConnections[e].addEventListener("connectionstatechange",(t=>{"disconnected"!=t.target.connectionState&&"failed"!=t.target.connectionState||this.close(e)}))}setupDataChannel(e){this.dataChannels[e].addEventListener("open",(t=>{this.emit("open",[e,t])})),this.dataChannels[e].addEventListener("message",(t=>{this.emit("message",[e,t])}))}close(e){this.peerConnections[e]&&(this.dataChannels[e].close(),this.peerConnections[e].close(),delete this.dataChannels[e],delete this.peerConnections[e])}send(e,t){this.dataChannels[e].send(JSON.stringify(t))}}(i)});r.addEventListener("click",(()=>{c.open(a.value)})),c.peer.onopen=e=>{console.log("OPEN")}})();